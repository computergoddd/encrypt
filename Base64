

/**
 *
 * @author tom
 */
public final class Base64 {
    private static char[] map1 = new char[64];
    static {
        int i = 0;
        for(char c = 'A'; c <= 'Z'; c++)
            map1[i++] = c;
        for(char c = 'a'; c <= 'z'; c++)
            map1[i++] = c;
        for(char c = '0'; c <= '9'; c++)
            map1[i++] = c;

        map1[i++] = '+'; map1[i++] = '/';
    }

    private final static byte[] map2 = new byte[128];
    static {
        for(int i = 0; i < map2.length; i++)
            map2[i] = -1;
        for(int i = 0; i < 64; i++)
            map2[map1[i]] =(byte)i;
    }

    public static String encode(byte[] data) {
        return new String(encode(data, data.length));
    }

    public static String encrypt(String data) {
        return encode(data.getBytes());
    }

    public static char[] encode(byte[] data, int size) {
        int dLen =(size * 4 + 2) / 3;
        int oLen =((size + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while(ip < size) {
            int i0 = data[ip++] & 0xff;
            int i1 = ip < size ? data[ip++] & 0xff : 0;
            int i2 = ip < size ? data[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 =((i0 &   3) << 4) |(i1 >>> 4);
            int o2 =((i1 & 0xf) << 2) |(i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < dLen ? map1[o2] : '='; op++;
            out[op] = op < dLen ? map1[o3] : '='; op++;
        } return out;
    }

    public static String decrypt(String data) {
        return new String(decode(data.toCharArray()));
    }
    
    public static byte[] decode(String data) {
        return decode(data.toCharArray());
    }

    public static byte[] decode(char[] data) {
        int size = data.length;
        if(size % 4 != 0)
            throw new IllegalArgumentException("Size of input string not a multiple of 4.");
        while(size > 0 && data[size - 1] == '=')
            size--;
            int oLen =(size * 3) / 4;
            byte[] out = new byte[oLen];
            int ip = 0;
            int op = 0;
        while(ip < size) {
            int i0 = data[ip++];
            int i1 = data[ip++];
            int i2 = ip < size ? data[ip++] : 'A';
            int i3 = ip < size ? data[ip++] : 'A';
            if(i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException("Illegal character in Base64 encoded data.");
                int b0 = map2[i0];
                int b1 = map2[i1];
                int b2 = map2[i2];
                int b3 = map2[i3];
            if(b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException("Illegal character in Base64 encoded data.");
                int o0 =( b0        << 2) |(b1 >>> 4);
                int o1 =((b1 & 0xf) << 4) |(b2 >>> 2);
                int o2 =((b2 &   3) << 6) |  b3;
                out[op++] =(byte)o0;
            if(op < oLen)
                out[op++] =(byte)o1;
            if(op < oLen)
                out[op++] =(byte)o2;
        } return out;
    }
}
